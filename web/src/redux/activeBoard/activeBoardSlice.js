import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'
import authorizedAxiosInstance from '~/utils/authorizeAxios'
import { API_ROOT } from '~/utils/constants'
import { mapOrder } from '~/utils/sorts'
import { isEmpty } from 'lodash'
import { generatePlaceholderCard } from '~/utils/formatters'
import { DEFAULT_BACKGROUND } from '~/utils/backgroundConstants'
import { PREDEFINED_LABELS } from '~/utils/labelConstants'

// Kh·ªüi t·∫°o gi√° tr·ªã State c·ªßa m·ªôt c√°i Slice trong redux
const initialState = {
  currentActiveBoard: null
}

// C√°c h√†nh ƒë·ªông g·ªçi api (b·∫•t ƒë·ªìng b·ªô) v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o Redux, d√πng Middleware createAsyncThunk ƒëi k√®m v·ªõi extraReducers
// https://redux-toolkit.js.org/api/createAsyncThunk
export const fetchBoardDetailsAPI = createAsyncThunk(
  'activeBoard/fetchBoardDetailsAPI',
  async (boardId) => {
    const response = await authorizedAxiosInstance.get(`${API_ROOT}/v1/boards/${boardId}`)
    // L∆∞u √Ω: axios s·∫Ω tr·∫£ k·∫øt qu·∫£ v·ªÅ qua property c·ªßa n√≥ l√† data
    return response.data
  }
)

export const deleteBoardAPI = createAsyncThunk(
  'activeBoard/deleteBoardAPI',
  async (boardId) => {
    const response = await authorizedAxiosInstance.delete(`${API_ROOT}/v1/boards/${boardId}`)
    return { boardId, ...response.data }
  }
)

// Kh·ªüi t·∫°o m·ªôt c√°i Slice trong kho l∆∞u tr·ªØ - Redux Store
export const activeBoardSlice = createSlice({
  name: 'activeBoard',
  initialState,
  // Reducers: N∆°i x·ª≠ l√Ω d·ªØ li·ªáu ƒë·ªìng b·ªô
  reducers: {
    // L∆∞u √Ω lu√¥n l√† ·ªü ƒë√¢y lu√¥n lu√¥n c·∫ßn c·∫∑p ngo·∫∑c nh·ªçn cho function trong reducer cho d√π code b√™n trong ch·ªâ c√≥ 1 d√≤ng, ƒë√¢y l√† rule c·ªßa Redux
    // https://redux-toolkit.js.org/usage/immer-reducers#mutating-and-returning-state
    updateCurrentActiveBoard: (state, action) => {
      // action.payload l√† chu·∫©n ƒë·∫∑t t√™n nh·∫≠n d·ªØ li·ªáu v√†o reducer, ·ªü ƒë√¢y ch√∫ng ta g√°n n√≥ ra m·ªôt bi·∫øn c√≥ nghƒ©a h∆°n
      const board = action.payload

      // X·ª≠ l√Ω d·ªØ li·ªáu n·∫øu c·∫ßn thi·∫øt...
      // ...

      // Update l·∫°i d·ªØ li·ªáu c·ªßa c√°i currentActiveBoard
      state.currentActiveBoard = board
    },
    updateCardInBoard: (state, action) => {
      // Update nested data
      // https://redux-toolkit.js.org/usage/immer-reducers#updating-nested-data
      const incomingCard = action.payload

      // T√¨m d·∫ßn t·ª´ board > column > card
      const column = state.currentActiveBoard.columns.find(i => i._id === incomingCard.columnId)
      if (column) {
        const card = column.cards.find(i => i._id === incomingCard._id)
        if (card) {
          // card.title = incomingCard.title
          // card['title'] = incomingCard['title']
          /**
           * Gi·∫£i th√≠ch ƒëo·∫°n d∆∞·ªõi, c√°c b·∫°n m·ªõi l·∫ßn ƒë·∫ßu s·∫Ω d·ªÖ b·ªã l√∫ :D
           * ƒê∆°n gi·∫£n l√† d√πng Object.keys ƒë·ªÉ l·∫•y to√†n b·ªô c√°c properties (keys) c·ªßa incomingCard v·ªÅ m·ªôt Array r·ªìi forEach n√≥ ra.
           * Sau ƒë√≥ t√πy v√†o tr∆∞·ªùng h·ª£p c·∫ßn th√¨ ki·ªÉm tra th√™m c√≤n kh√¥ng th√¨ c·∫≠p nh·∫≠t ng∆∞·ª£c l·∫°i gi√° tr·ªã v√†o card lu√¥n nh∆∞ b√™n d∆∞·ªõi.
          */
          Object.keys(incomingCard).forEach(key => {
            card[key] = incomingCard[key]
          })
        }
      }
    },
    updateColumnInBoard: (state, action) => {
      const incomingColumn = action.payload
      const column = state.currentActiveBoard.columns.find(i => i._id === incomingColumn._id)
      if (column) {
        Object.keys(incomingColumn).forEach(key => {
          column[key] = incomingColumn[key]
        })
      }
    },
    updateBoardBackground: (state, action) => {
      // Nh·∫≠n d·ªØ li·ªáu background t·ª´ action.payload
      const backgroundData = action.payload

      // ƒê·∫£m b·∫£o currentActiveBoard t·ªìn t·∫°i
      if (!state.currentActiveBoard) return

      // C·∫≠p nh·∫≠t background c·ªßa board hi·ªán t·∫°i
      state.currentActiveBoard.background = backgroundData
    },
    // Action ƒë·ªÉ th√™m label m·ªõi v√†o board
    addLabelToBoard: (state, action) => {
      const newLabel = action.payload
      
      // ƒê·∫£m b·∫£o currentActiveBoard v√† labels t·ªìn t·∫°i
      if (!state.currentActiveBoard) return
      if (!state.currentActiveBoard.labels) {
        state.currentActiveBoard.labels = []
      }
      
      // Th√™m label m·ªõi v√†o ƒë·∫ßu m·∫£ng
      state.currentActiveBoard.labels.unshift(newLabel)
    },
    // Action ƒë·ªÉ x√≥a label kh·ªèi board
    deleteLabelFromBoard: (state, action) => {
      const labelId = action.payload
      
      // ƒê·∫£m b·∫£o currentActiveBoard v√† labels t·ªìn t·∫°i
      if (!state.currentActiveBoard || !state.currentActiveBoard.labels) return
      
      // X√≥a label kh·ªèi danh s√°ch labels c·ªßa board
      state.currentActiveBoard.labels = state.currentActiveBoard.labels.filter(
        label => label.id !== labelId
      )
      
      // X√≥a label kh·ªèi t·∫•t c·∫£ c√°c card
      state.currentActiveBoard.columns.forEach(column => {
        column.cards.forEach(card => {
          if (card.labelIds && card.labelIds.includes(labelId)) {
            card.labelIds = card.labelIds.filter(id => id !== labelId)
          }
        })
      })
    },
    // Action ƒë·ªÉ c·∫≠p nh·∫≠t card khi th√™m/x√≥a label
    updateCardLabels: (state, action) => {
      const { cardId, labelIds } = action.payload
      
      // T√¨m card trong board
      for (const column of state.currentActiveBoard.columns) {
        const card = column.cards.find(c => c._id === cardId)
        if (card) {
          // C·∫≠p nh·∫≠t labels cho card
          card.labelIds = labelIds
          break
        }
      }
    },
    // Action to specifically handle due date updates for better calendar synchronization
    updateCardDueDate: (state, action) => {
      const { cardId, dueDate } = action.payload
      
      // ƒê·∫£m b·∫£o currentActiveBoard t·ªìn t·∫°i
      if (!state.currentActiveBoard) return

      // T√¨m card trong board v√† c·∫≠p nh·∫≠t due date
      for (const column of state.currentActiveBoard.columns) {
        const card = column.cards.find(c => c._id === cardId)
        if (card) {
          // C·∫≠p nh·∫≠t due date v√† timestamp c·∫≠p nh·∫≠t
          card.dueDate = dueDate
          card.updatedAt = Date.now()
          
          console.log(`üìÖ Redux: Updated due date for card "${card.title}" to ${dueDate}`)
          break
        }
      }
    },
    // Action to sync calendar changes back to board view
    syncCalendarToBoard: (state, action) => {
      const { cardUpdates } = action.payload
      
      // ƒê·∫£m b·∫£o currentActiveBoard t·ªìn t·∫°i
      if (!state.currentActiveBoard || !Array.isArray(cardUpdates)) return

      // C·∫≠p nh·∫≠t nhi·ªÅu cards c√πng l√∫c (useful for calendar batch operations)
      cardUpdates.forEach(({ cardId, updates }) => {
        for (const column of state.currentActiveBoard.columns) {
          const card = column.cards.find(c => c._id === cardId)
          if (card) {
            Object.keys(updates).forEach(key => {
              card[key] = updates[key]
            })
            card.updatedAt = Date.now()
            break
          }
        }
      })
    },
    /**
     * Remove a card from the board state optimistically
     * @param {Object} action.payload - { cardId, columnId }
     */
    removeCardFromBoard: (state, action) => {
      const { cardId, columnId } = action.payload
      if (!state.currentActiveBoard) return
      const column = state.currentActiveBoard.columns.find(c => c._id === columnId)
      if (!column) return
      // Remove card from cards array
      column.cards = column.cards.filter(c => c._id !== cardId)
      // Remove cardId from cardOrderIds
      column.cardOrderIds = column.cardOrderIds.filter(id => id !== cardId)
    }
  },
  // ExtraReducers: N∆°i x·ª≠ l√Ω d·ªØ li·ªáu b·∫•t ƒë·ªìng b·ªô
  extraReducers: (builder) => {
    builder.addCase(fetchBoardDetailsAPI.fulfilled, (state, action) => {
      // action.payload ·ªü d√¢y ch√≠nh l√† c√°i response.data tr·∫£ v·ªÅ ·ªü tr√™n
      let board = action.payload

      // Th√†nh vi√™n trong c√°i board s·∫Ω l√† g·ªôp l·∫°i c·ªßa 2 m·∫£ng owners v√† members
      board.FE_allUsers = board.owners.concat(board.members)

      // S·∫Øp x·∫øp th·ª© t·ª± c√°c column lu√¥n ·ªü ƒë√¢y tr∆∞·ªõc khi ƒë∆∞a d·ªØ li·ªáu xu·ªëng b√™n d∆∞·ªõi c√°c component con (video 71 ƒë√£ gi·∫£i th√≠ch l√Ω do ·ªü ph·∫ßn Fix bug quan tr·ªçng)
      board.columns = mapOrder(board.columns, board.columnOrderIds, '_id')

      // ƒê·∫£m b·∫£o board c√≥ background, n·∫øu kh√¥ng th√¨ set default
      // Map background t·ª´ backend v·ªÅ FE
      function mapApiBackgroundToFE(board) {
        if (!board) return DEFAULT_BACKGROUND
        if (board.backgroundType === 'color') return { type: 'color', value: board.backgroundColor }
        if (board.backgroundType === 'image') return { type: 'image', value: board.backgroundImage }
        if (board.backgroundType === 'url') return { type: 'url', value: board.backgroundUrl }
        if (board.backgroundType === 'upload') return { type: 'upload', value: board.backgroundUpload }
        return DEFAULT_BACKGROUND
      }
      board.background = mapApiBackgroundToFE(board)

      // ƒê·∫£m b·∫£o board c√≥ tr∆∞·ªùng labels, n·∫øu kh√¥ng th√¨ kh·ªüi t·∫°o v·ªõi mock data
      if (!board.labels) {
        board.labels = PREDEFINED_LABELS
      }

      board.columns.forEach(column => {
        // Khi f5 trang web th√¨ c·∫ßn x·ª≠ l√Ω v·∫•n ƒë·ªÅ k√©o th·∫£ v√†o m·ªôt column r·ªóng (Nh·ªõ l·∫°i video 37.2, code hi·ªán t·∫°i l√† video 69)
        if (isEmpty(column.cards)) {
          column.cards = [generatePlaceholderCard(column)]
          column.cardOrderIds = [generatePlaceholderCard(column)._id]
        } else {
          // S·∫Øp x·∫øp th·ª© t·ª± c√°c cards lu√¥n ·ªü ƒë√¢y tr∆∞·ªõc khi ƒë∆∞a d·ªØ li·ªáu xu·ªëng b√™n d∆∞·ªõi c√°c component con (video 71 ƒë√£ gi·∫£i th√≠ch l√Ω do ·ªü ph·∫ßn Fix bug quan tr·ªçng)
          column.cards = mapOrder(column.cards, column.cardOrderIds, '_id')
          
          // ƒê·∫£m b·∫£o m·ªói card c√≥ tr∆∞·ªùng labelIds
          column.cards.forEach(card => {
            if (!card.labelIds) {
              card.labelIds = []
            }
          })
        }
      })

      // Update l·∫°i d·ªØ li·ªáu c·ªßa c√°i currentActiveBoard
      state.currentActiveBoard = board
    })

    // Handle delete board
    builder.addCase(deleteBoardAPI.fulfilled, (state, action) => {
      // Clear the current active board when it's deleted
      state.currentActiveBoard = null
    })
    
    builder.addCase(deleteBoardAPI.rejected, (state, action) => {
      // Handle delete error - keep the current board state
      console.error('Delete board failed:', action.error.message)
    })
  }
})

// Action creators are generated for each case reducer function
// Actions: L√† n∆°i d√†nh cho c√°c components b√™n d∆∞·ªõi g·ªçi b·∫±ng dispatch() t·ªõi n√≥ ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu th√¥ng qua reducer (ch·∫°y ƒë·ªìng b·ªô)
// ƒê·ªÉ √Ω ·ªü tr√™n th√¨ kh√¥ng th·∫•y properties actions ƒë√¢u c·∫£, b·ªüi v√¨ nh·ªØng c√°i actions n√†y ƒë∆°n gi·∫£n l√† ƒë∆∞·ª£c th·∫±ng redux t·∫°o t·ª± ƒë·ªông theo t√™n c·ªßa reducer nh√©.
export const { 
  updateCurrentActiveBoard, 
  updateCardInBoard, 
  updateColumnInBoard,
  updateBoardBackground,
  addLabelToBoard,
  deleteLabelFromBoard,
  updateCardLabels,
  updateCardDueDate,
  syncCalendarToBoard,
  removeCardFromBoard
} = activeBoardSlice.actions

// Selectors: L√† n∆°i d√†nh cho c√°c components b√™n d∆∞·ªõi g·ªçi b·∫±ng hook useSelector() ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ trong kho redux store ra s·ª≠ d·ª•ng
export const selectCurrentActiveBoard = (state) => {
  return state.activeBoard.currentActiveBoard
}

// Selector ƒë·ªÉ l·∫•y background c·ªßa board hi·ªán t·∫°i
export const selectBoardBackground = (state) => {
  return state.activeBoard.currentActiveBoard?.background || DEFAULT_BACKGROUND
}

// Selector ƒë·ªÉ l·∫•y labels c·ªßa board hi·ªán t·∫°i
export const selectBoardLabels = (state) => {
  return state.activeBoard.currentActiveBoard?.labels || []
}

// Calendar-specific selectors for better state management
export const selectCardsWithDueDate = (state) => {
  const board = state.activeBoard.currentActiveBoard
  if (!board?.columns) return []
  
  const cardsWithDueDate = []
  
  board.columns.forEach(column => {
    if (column.cards) {
      column.cards.forEach(card => {
        // Skip placeholder cards and cards without due date
        if (!card.FE_PlaceholderCard && card.dueDate) {
          cardsWithDueDate.push({
            ...card,
            columnTitle: column.title,
            columnId: column._id
          })
        }
      })
    }
  })
  
  return cardsWithDueDate
}

// Selector ƒë·ªÉ l·∫•y cards v·ªõi due date trong kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh
export const selectCardsWithDueDateInRange = (startDate, endDate) => (state) => {
  const cardsWithDueDate = selectCardsWithDueDate(state)
  
  if (!startDate && !endDate) return cardsWithDueDate
  
  return cardsWithDueDate.filter(card => {
    const cardDueDate = new Date(card.dueDate)
    const start = startDate ? new Date(startDate) : null
    const end = endDate ? new Date(endDate) : null
    
    if (start && end) {
      return cardDueDate >= start && cardDueDate <= end
    } else if (start) {
      return cardDueDate >= start
    } else if (end) {
      return cardDueDate <= end
    }
    
    return true
  })
}

// Selector ƒë·ªÉ l·∫•y th·ªëng k√™ due date cho dashboard
export const selectDueDateStats = (state) => {
  const cardsWithDueDate = selectCardsWithDueDate(state)
  const now = new Date()
  
  const stats = {
    total: cardsWithDueDate.length,
    overdue: 0,
    dueSoon: 0, // within 24 hours
    upcoming: 0 // within 7 days
  }
  
  cardsWithDueDate.forEach(card => {
    const dueDate = new Date(card.dueDate)
    const diffInHours = (dueDate - now) / (1000 * 60 * 60)
    
    if (diffInHours < 0) {
      stats.overdue++
    } else if (diffInHours <= 24) {
      stats.dueSoon++
    } else if (diffInHours <= 168) { // 7 days
      stats.upcoming++
    }
  })
  
  return stats
}

// Selector ƒë·ªÉ t√¨m card theo ID trong board hi·ªán t·∫°i
export const selectCardById = (cardId) => (state) => {
  const board = state.activeBoard.currentActiveBoard
  if (!board?.columns) return null
  
  for (const column of board.columns) {
    if (column.cards) {
      const card = column.cards.find(c => c._id === cardId)
      if (card) {
        return {
          ...card,
          columnTitle: column.title,
          columnId: column._id
        }
      }
    }
  }
  
  return null
}

// C√°i file n√†y t√™n l√† activeBoardSlice NH∆ØNG ch√∫ng ta s·∫Ω export m·ªôt th·ª© t√™n l√† Reducer, m·ªçi ng∆∞·ªùi l∆∞u √Ω :D
// export default activeBoardSlice.reducer
export const activeBoardReducer = activeBoardSlice.reducer
