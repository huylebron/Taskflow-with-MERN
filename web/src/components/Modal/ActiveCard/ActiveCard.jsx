import Box from '@mui/material/Box'
import Modal from '@mui/material/Modal'
import Typography from '@mui/material/Typography'
import CreditCardIcon from '@mui/icons-material/CreditCard'
import CancelIcon from '@mui/icons-material/Cancel'
import Grid from '@mui/material/Unstable_Grid2'
import Stack from '@mui/material/Stack'
import PersonOutlineOutlinedIcon from '@mui/icons-material/PersonOutlineOutlined'
import LocalOfferOutlinedIcon from '@mui/icons-material/LocalOfferOutlined'
import TaskAltOutlinedIcon from '@mui/icons-material/TaskAltOutlined'
import WatchLaterOutlinedIcon from '@mui/icons-material/WatchLaterOutlined'
import AttachFileOutlinedIcon from '@mui/icons-material/AttachFileOutlined'
import ImageOutlinedIcon from '@mui/icons-material/ImageOutlined'
import AutoFixHighOutlinedIcon from '@mui/icons-material/AutoFixHighOutlined'
import DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined'
import Tooltip from '@mui/material/Tooltip'
import IconButton from '@mui/material/IconButton'
import TextField from '@mui/material/TextField'
import Button from '@mui/material/Button'
import Dialog from '@mui/material/Dialog'
import DialogTitle from '@mui/material/DialogTitle'
import DialogContent from '@mui/material/DialogContent'
import DialogActions from '@mui/material/DialogActions'

import SubjectRoundedIcon from '@mui/icons-material/SubjectRounded'
import DvrOutlinedIcon from '@mui/icons-material/DvrOutlined'

import ToggleFocusInput from '~/components/Form/ToggleFocusInput'
import VisuallyHiddenInput from '~/components/Form/VisuallyHiddenInput'
import { singleFileValidator } from '~/utils/validators'
import { toast } from 'react-toastify'
import CardUserGroup from './CardUserGroup'
import CardDescriptionMdEditor from './CardDescriptionMdEditor'
import CardActivitySection from './CardActivitySection'
import { useDispatch, useSelector } from 'react-redux'
import { useState, useEffect } from 'react'
import {
  clearAndHideCurrentActiveCard,
  selectCurrentActiveCard,
  updateCurrentActiveCard,
  selectIsShowModalActiveCard
} from '~/redux/activeCard/activeCardSlice'
import { updateCardDetailsAPI } from '~/apis'
import { 
  updateCardInBoard, 
  selectCurrentActiveBoard,
  addLabelToBoard,
  deleteLabelFromBoard,
  updateCardLabels
} from '~/redux/activeBoard/activeBoardSlice'
import { selectCurrentUser } from '~/redux/user/userSlice'
import { CARD_MEMBER_ACTIONS } from '~/utils/constants'
import ExitToAppIcon from '@mui/icons-material/ExitToApp'
import CheckCircleIcon from '@mui/icons-material/CheckCircle'
import Menu from '@mui/material/Menu'
import MenuItem from '@mui/material/MenuItem'

import { styled } from '@mui/material/styles'
import ImageLightbox from '../ImageLightbox/ImageLightbox'
import CoverOptionsModal from './CoverOptionsModal'
import AttachmentModal from './AttachmentModal' // ‚úÖ Removed MOCK_ATTACHMENTS import
import LabelDialog from '../LabelDialog/LabelDialog'
import { generateLabelId } from '~/utils/labelConstants'
import { toggleLabel } from '~/utils/labelHelpers'
import Chip from '@mui/material/Chip'
import LabelChip from '~/components/LabelChip/LabelChip'
import ChecklistDialog from '../ChecklistDialog/ChecklistDialog'
import { MOCK_CHECKLISTS } from '~/utils/checklistConstants'

// Import the new due date API function for optimized calendar operations
import { updateCardDueDateAPI } from '~/apis'
import { useCalendarSync } from '~/customHooks/useCalendarSync'
import {
  addLabelToBoardAPI,
  deleteLabelFromBoardAPI,
  updateCardLabelsAPI
} from '~/apis'

const SidebarItem = styled(Box)(({ theme }) => ({
  display: 'flex',
  alignItems: 'center',
  gap: '6px',
  cursor: 'pointer',
  fontSize: '14px',
  fontWeight: '600',
  color: theme.palette.mode === 'dark' ? '#90caf9' : '#172b4d',
  backgroundColor: theme.palette.mode === 'dark' ? '#2f3542' : '#091e420f',
  padding: '10px',
  borderRadius: '4px',
  '&:hover': {
    backgroundColor: theme.palette.mode === 'dark' ? '#33485D' : theme.palette.grey[300],
    '&.active': {
      color: theme.palette.mode === 'dark' ? '#000000de' : '#0c66e4',
      backgroundColor: theme.palette.mode === 'dark' ? '#90caf9' : '#e9f2ff'
    }
  }
}))

/**
 * Note: Modal l√† m·ªôt low-component m√† b·ªçn MUI s·ª≠ d·ª•ng b√™n trong nh·ªØng th·ª© nh∆∞ Dialog, Drawer, Menu, Popover. ·ªû ƒë√¢y dƒ© nhi√™n ch√∫ng ta c√≥ th·ªÉ s·ª≠ d·ª•ng Dialog c≈©ng kh√¥ng th√†nh v·∫•n ƒë·ªÅ g√¨, nh∆∞ng s·∫Ω s·ª≠ d·ª•ng Modal ƒë·ªÉ d·ªÖ linh ho·∫°t t√πy bi·∫øn giao di·ªán t·ª´ con s·ªë 0 cho ph√π h·ª£p v·ªõi m·ªçi nhu c·∫ßu nh√©.
 */
function ActiveCard() {
  const dispatch = useDispatch()
  const activeCard = useSelector(selectCurrentActiveCard)
  const isShowModalActiveCard = useSelector(selectIsShowModalActiveCard)
  const currentUser = useSelector(selectCurrentUser)
  const activeBoard = useSelector(selectCurrentActiveBoard)
  const [showCoverLightbox, setShowCoverLightbox] = useState(false)
  const [showCoverOptions, setShowCoverOptions] = useState(false)
  const [showLabelDialog, setShowLabelDialog] = useState(false)

  // Use calendar synchronization hook for due date management
  const { updateDueDate, triggerCalendarRefresh } = useCalendarSync()

  // State for Attachment feature - üö® CRITICAL: Thay th·∫ø MOCK_ATTACHMENTS
  const [showAttachmentModal, setShowAttachmentModal] = useState(false)
  const [attachments, setAttachments] = useState([]) // ‚úÖ Removed MOCK_ATTACHMENTS
  const [showAttachmentLightbox, setShowAttachmentLightbox] = useState(false)
  const [selectedAttachment, setSelectedAttachment] = useState(null)

  // State for Checklist feature - Remove mock data
  const [showChecklistDialog, setShowChecklistDialog] = useState(false)
  const [checklists, setChecklists] = useState(activeCard?.checklists || [])

  // Update checklists when activeCard changes
  useEffect(() => {
    if (activeCard?.checklists) {
      setChecklists(activeCard.checklists)
    }
  }, [activeCard])

  // State for "Th√™m" button dropdown menu
  const [anchorEl, setAnchorEl] = useState(null);
  const openMoreMenu = Boolean(anchorEl);
  const handleMoreMenuClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleMoreMenuClose = () => {
    setAnchorEl(null);
  };

  // State for Due Date Picker
  const [showDueDatePicker, setShowDueDatePicker] = useState(false)
  const [selectedDateTime, setSelectedDateTime] = useState('')

  // Helper functions cho due date
  const formatDueDateDisplay = (dueDate) => {
    if (!dueDate) return ''
    
    const due = new Date(dueDate)
    const now = new Date()
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
    const dueDay = new Date(due.getFullYear(), due.getMonth(), due.getDate())
    
    const diffInDays = Math.ceil((dueDay - today) / (1000 * 60 * 60 * 24))
    
    if (diffInDays === 0) {
      return `H√¥m nay l√∫c ${due.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}`
    } else if (diffInDays === 1) {
      return `Ng√†y mai l√∫c ${due.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}`
    } else if (diffInDays === -1) {
      return `H√¥m qua l√∫c ${due.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}`
    } else if (diffInDays < 0) {
      return `${Math.abs(diffInDays)} ng√†y tr∆∞·ªõc l√∫c ${due.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}`
    } else if (diffInDays <= 7) {
      return `${diffInDays} ng√†y n·ªØa l√∫c ${due.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}`
    } else {
      return due.toLocaleString('vi-VN', { 
        day: '2-digit', 
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })
    }
  }

  const getDueDateStatusColor = (dueDate) => {
    if (!dueDate) return 'inherit'
    
    const now = new Date()
    const due = new Date(dueDate)
    const diffInHours = (due - now) / (1000 * 60 * 60)
    
    if (diffInHours < 0) {
      return '#d32f2f' // ƒê·ªè - ƒë√£ qu√° h·∫°n
    } else if (diffInHours <= 24) {
      return '#f57c00' // Cam - s·∫Øp h·∫øt h·∫°n
    } else {
      return 'inherit' // B√¨nh th∆∞·ªùng
    }
  }

  // Kh√¥ng d√πng bi·∫øn State ƒë·ªÉ check ƒë√≥ng m·ªü Modal n·ªØa v√¨ ch√∫ng ta s·∫Ω check theo c√°i bi·∫øn isShowModalActiveCard trong redux
  // const [isOpen, setIsOpen] = useState(true)
  // const handleOpenModal = () => setIsOpen(true)
  const handleCloseModal = () => {
    // setIsOpen(false)
    dispatch(clearAndHideCurrentActiveCard())
  }

  // Func g·ªçi API d√πng chung cho c√°c tr∆∞·ªùng h·ª£p update card title, description, cover, comment...vv
  const callApiUpdateCard = async (updateData) => {
    const updatedCard = await updateCardDetailsAPI(activeCard._id, updateData)

    // B1: C·∫≠p nh·∫≠t l·∫°i c√°i card ƒëang active trong modal hi·ªán t·∫°i
    dispatch(updateCurrentActiveCard(updatedCard))

    // B2: C·∫≠p nh·∫≠t l·∫°i c√°i b·∫£n ghi card trong c√°i activeBoard (nested data)
    dispatch(updateCardInBoard(updatedCard))

    return updatedCard
  }

  const onUpdateCardTitle = (newTitle) => {
    callApiUpdateCard({ title: newTitle.trim() })
  }

  const onUpdateCardDescription = (newDescription) => {
    callApiUpdateCard({ description: newDescription })
  }

  const onUploadCardCover = (event) => {
    // console.log(event.target?.files[0])
    const error = singleFileValidator(event.target?.files[0])
    if (error) {
      toast.error(error)
      return
    }
    let reqData = new FormData()
    reqData.append('cardCover', event.target?.files[0])

    // G·ªçi API...
    toast.promise(
      callApiUpdateCard(reqData).finally(() => event.target.value = ''),
      { pending: 'Updating...' }
    )
  }

  const onDeleteCardCover = async () => {
    try {
      // G·ªçi API ƒë·ªÉ x√≥a cover
      await callApiUpdateCard({ deleteCardCover: true })
      
      // Th√¥ng b√°o th√†nh c√¥ng
      toast.success('X√≥a ·∫£nh cover th√†nh c√¥ng!', { position: 'bottom-right' })
    } catch (error) {
      toast.error('X√≥a ·∫£nh cover th·∫•t b·∫°i!', { position: 'bottom-right' })
    }
  }

  // D√πng async await ·ªü ƒë√¢y ƒë·ªÉ component con CardActivitySection ch·ªù v√† n·∫øu th√†nh c√¥ng th√¨ m·ªõi clear th·∫ª input comment
  const onAddCardComment = async (commentToAdd) => {
    await callApiUpdateCard({ commentToAdd })
  }

  const onUpdateCardMembers = (incomingMemberInfo) => {
    callApiUpdateCard({ incomingMemberInfo })
  }

  const handleCoverClick = (e) => {
    setShowCoverLightbox(true)
  }

  const handleCloseCoverLightbox = () => {
    setShowCoverLightbox(false)
  }

  const onShowCoverOptions = () => {
    setShowCoverOptions(true)
  }

  const onCloseCoverOptions = () => {
    setShowCoverOptions(false)
  }

  const onSelectCoverColor = async (coverValue, coverType) => {
    try {
      // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t cover v·ªõi m√†u ho·∫∑c gradient
      await callApiUpdateCard({
        cover: coverValue,
        coverType: coverType
      })
      
      // Th√¥ng b√°o th√†nh c√¥ng
      toast.success('C·∫≠p nh·∫≠t ·∫£nh b√¨a th√†nh c√¥ng!', { position: 'bottom-right' })
    } catch (error) {
      toast.error('C·∫≠p nh·∫≠t ·∫£nh b√¨a th·∫•t b·∫°i!', { position: 'bottom-right' })
    }
  }

  const onUploadCoverFromModal = (file) => {
    let reqData = new FormData()
    reqData.append('cardCover', file)

    // G·ªçi API...
    toast.promise(
      callApiUpdateCard(reqData),
      { pending: 'ƒêang t·∫£i l√™n...', success: 'C·∫≠p nh·∫≠t ·∫£nh b√¨a th√†nh c√¥ng!', error: 'C·∫≠p nh·∫≠t ·∫£nh b√¨a th·∫•t b·∫°i!' }
    )
  }

  // Handlers for Attachment feature
  const onShowAttachmentModal = () => {
    setShowAttachmentModal(true)
  }

  const onCloseAttachmentModal = () => {
    setShowAttachmentModal(false)
  }

  // üî• QUAN TR·ªåNG: Updated attachment handlers for API integration
  const onAddAttachment = (newAttachment) => {
    setAttachments(prev => [...prev, newAttachment])
    // Toast success ƒë√£ ƒë∆∞·ª£c handle trong AttachmentModal
  }

  const onDeleteAttachment = (attachmentId) => {
    setAttachments(prev => prev.filter(attachment => (attachment._id || attachment.id) !== attachmentId))
    // Toast success ƒë√£ ƒë∆∞·ª£c handle trong AttachmentModal
  }

  const onShowAttachmentLightbox = (attachment) => {
    if (attachment.type.startsWith('image/')) {
      setSelectedAttachment(attachment)
      setShowAttachmentLightbox(true)
    } else {
      // N·∫øu kh√¥ng ph·∫£i ·∫£nh, m·ªü trong tab m·ªõi
      window.open(attachment.url, '_blank')
    }
  }

  const onCloseAttachmentLightbox = () => {
    setShowAttachmentLightbox(false)
    setSelectedAttachment(null)
  }

  // Label features
  const onShowLabelDialog = () => {
    setShowLabelDialog(true)
  }

  const onCloseLabelDialog = () => {
    setShowLabelDialog(false)
  }

  const onToggleLabel = async (labelId) => {
    const currentLabelIds = activeCard?.labelIds || []
    const updatedLabelIds = toggleLabel(labelId, currentLabelIds)
    // C·∫≠p nh·∫≠t local state tr∆∞·ªõc (optimistic update)
    const updatedCard = { ...activeCard, labelIds: updatedLabelIds }
    dispatch(updateCurrentActiveCard(updatedCard))
    dispatch(updateCardLabels({ cardId: activeCard._id, labelIds: updatedLabelIds }))
    // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t labelIds cho card
    try {
      await updateCardLabelsAPI(activeCard._id, updatedLabelIds)
    } catch (err) {
      toast.error('C√≥ l·ªói khi c·∫≠p nh·∫≠t label cho card!')
    }
  }

  const onCreateLabel = async (newLabel) => {
    const labelWithId = { ...newLabel, id: generateLabelId() }
    // G·ªçi API ƒë·ªÉ th√™m label v√†o board
    try {
      await addLabelToBoardAPI(activeBoard._id, labelWithId)
      dispatch(addLabelToBoard(labelWithId))
      // T·ª± ƒë·ªông g√°n label m·ªõi v√†o card hi·ªán t·∫°i
      await onToggleLabel(labelWithId.id)
      toast.success('T·∫°o label m·ªõi th√†nh c√¥ng!', { position: 'bottom-right' })
    } catch (err) {
      toast.error('C√≥ l·ªói khi t·∫°o label m·ªõi!')
    }
  }

  const onDeleteLabel = async (labelId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a label n√†y? Label s·∫Ω b·ªã x√≥a kh·ªèi t·∫•t c·∫£ c√°c card.')) {
      try {
        await deleteLabelFromBoardAPI(activeBoard._id, labelId)
        dispatch(deleteLabelFromBoard(labelId))
        toast.success('X√≥a label th√†nh c√¥ng!', { position: 'bottom-right' })
      } catch (err) {
        toast.error('C√≥ l·ªói khi x√≥a label!')
      }
    }
  }

  // Handlers for Checklist feature
  const onShowChecklistDialog = () => {
    setShowChecklistDialog(true)
  }

  const onCloseChecklistDialog = () => {
    setShowChecklistDialog(false)
  }

  const onUpdateChecklists = async (updatedChecklists) => {
    try {
      // Update local state
      setChecklists(updatedChecklists)
      
      // Update card in Redux store
      const updatedCard = { ...activeCard, checklists: updatedChecklists }
      dispatch(updateCurrentActiveCard(updatedCard))
      dispatch(updateCardInBoard(updatedCard))
      
      toast.success('C·∫≠p nh·∫≠t checklist th√†nh c√¥ng!')
    } catch (error) {
      toast.error('C√≥ l·ªói khi c·∫≠p nh·∫≠t checklist!')
    }
  }

  // Due Date handlers
  const onShowDueDatePicker = () => {
    // Kh·ªüi t·∫°o v·ªõi gi√° tr·ªã hi·ªán t·∫°i n·∫øu c√≥, ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
    const currentDueDate = activeCard?.dueDate
    if (currentDueDate) {
      const date = new Date(currentDueDate)
      // Format ƒë·ªÉ ph√π h·ª£p v·ªõi input datetime-local
      const formattedDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000)
        .toISOString()
        .slice(0, 16)
      setSelectedDateTime(formattedDate)
    } else {
      // M·∫∑c ƒë·ªãnh l√† 1 gi·ªù t·ª´ b√¢y gi·ªù
      const defaultDate = new Date()
      defaultDate.setHours(defaultDate.getHours() + 1)
      const formattedDate = new Date(defaultDate.getTime() - defaultDate.getTimezoneOffset() * 60000)
        .toISOString()
        .slice(0, 16)
      setSelectedDateTime(formattedDate)
    }
    setShowDueDatePicker(true)
    handleMoreMenuClose()
  }

  const onCloseDueDatePicker = () => {
    setShowDueDatePicker(false)
    setSelectedDateTime('')
  }

  const onSaveDueDate = async () => {
    if (!selectedDateTime) {
      toast.error('Vui l√≤ng ch·ªçn ng√†y v√† gi·ªù')
      return
    }

    try {
      // Validate the selected date
      const selectedDate = new Date(selectedDateTime)
      if (isNaN(selectedDate.getTime())) {
        toast.error('Ng√†y gi·ªù kh√¥ng h·ª£p l·ªá!')
        return
      }

      // Check if date is not in the past (optional validation)
      const now = new Date()
      if (selectedDate < now) {
        // Warning for past dates but still allow
        if (!window.confirm('Ng√†y ƒë√£ ch·ªçn ƒë√£ qua. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?')) {
          return
        }
      }

      const dueDate = selectedDate.toISOString()
      
      // Use the synchronization hook for better state management
      await updateDueDate(activeCard._id, dueDate, {
        optimistic: true,
        showToast: true,
        source: 'active-card-modal'
      })
      
      // Trigger calendar refresh to show updated due date
      triggerCalendarRefresh()
      
      onCloseDueDatePicker()
    } catch (error) {
      console.error('Error updating due date:', error)
      // Error toast is handled by the sync hook
    }
  }

  const onRemoveDueDate = async () => {
    try {
      // Confirm before removing due date
      if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng√†y h·∫øt h·∫°n?')) {
        return
      }

      // Use the synchronization hook for consistent state management
      await updateDueDate(activeCard._id, null, {
        optimistic: true,
        showToast: true,
        source: 'active-card-modal-remove'
      })
      
      // Trigger calendar refresh to show removed due date
      triggerCalendarRefresh()
      
      onCloseDueDatePicker()
    } catch (error) {
      console.error('Error removing due date:', error)
      // Error toast is handled by the sync hook
    }
  }

  // Quick due date update function for calendar drag-and-drop operations
  const onQuickUpdateDueDate = async (newDueDate) => {
    try {
      // Use the synchronization hook for optimistic updates and consistent state management
      return await updateDueDate(activeCard._id, newDueDate, {
        optimistic: true,
        showToast: true,
        source: 'calendar-drag-drop-to-modal'
      })
    } catch (error) {
      console.error('Error updating due date via calendar:', error)
      throw error
    }
  }

  return (
    <Modal
      disableScrollLock
      open={isShowModalActiveCard}
      onClose={handleCloseModal}
      sx={{ overflowY: 'auto' }}>
      <Box sx={{
        position: 'relative',
        width: 1100,
        maxWidth: 1100,
        bgcolor: 'white',
        boxShadow: 24,
        borderRadius: '8px',
        border: 'none',
        outline: 0,
        padding: '40px 32px 32px',
        margin: '48px auto',
        backgroundColor: (theme) => theme.palette.mode === 'dark' ? '#1A2027' : '#fff'
      }}>
        <Box sx={{
          position: 'absolute',
          top: '12px',
          right: '10px',
          cursor: 'pointer'
        }}>
          <CancelIcon color="error" sx={{ '&:hover': { color: 'error.light' } }} onClick={handleCloseModal} />
        </Box>

        {activeCard?.cover &&
          <Box sx={{ mb: 4, position: 'relative' }}>
            <img
              style={{ 
                width: '100%', 
                height: '320px', 
                borderRadius: '6px', 
                objectFit: 'cover',
                cursor: 'zoom-in',
                ...(activeCard?.coverType === 'color' || activeCard?.coverType === 'gradient' ? { 
                  display: 'none' 
                } : {})
              }}
              src={activeCard?.cover}
              alt="card-cover"
              onClick={handleCoverClick}
            />
            {(activeCard?.coverType === 'color' || activeCard?.coverType === 'gradient') && (
              <Box 
                sx={{ 
                  width: '100%', 
                  height: '160px', 
                  borderRadius: '6px', 
                  background: activeCard?.cover,
                  mb: 2
                }}
              />
            )}
            <Tooltip title="X√≥a ·∫£nh cover">
              <IconButton
                onClick={onDeleteCardCover}
                sx={{
                  position: 'absolute',
                  top: 8,
                  right: 8,
                  backgroundColor: 'rgba(0, 0, 0, 0.4)',
                  color: 'white',
                  '&:hover': {
                    backgroundColor: 'rgba(0, 0, 0, 0.6)',
                  }
                }}
                size="medium"
              >
                <DeleteOutlinedIcon />
              </IconButton>
            </Tooltip>
          </Box>
        }

        <Box sx={{ mb: 1, mt: -3, pr: 2.5, display: 'flex', alignItems: 'center', gap: 1 }}>
          <CreditCardIcon />

          {/* Feature 01: X·ª≠ l√Ω ti√™u ƒë·ªÅ c·ªßa Card */}
          <ToggleFocusInput
            inputFontSize='22px'
            value={activeCard?.title}
            onChangedValue={onUpdateCardTitle} />
        </Box>

        {/* Labels display section */}
        {activeCard?.labelIds?.length > 0 && (
          <Box sx={{ mb: 3, mt: 1, display: 'flex', flexWrap: 'wrap', gap: 0.75 }}>
            {activeCard.labelIds.map(labelId => {
              const label = activeBoard?.labels?.find(l => l.id === labelId)
              if (!label) return null
              
              return (
                <LabelChip
                  key={label.id}
                  label={label}
                  onClick={onShowLabelDialog}
                  sx={{ cursor: 'pointer' }}
                />
              )
            })}
          </Box>
        )}

        {/* Members section - full width */}
        <Box sx={{ mb: 3 }}>
          <Typography sx={{ fontWeight: '600', color: 'primary.main', mb: 1 }}>Members</Typography>
          <CardUserGroup
            cardMemberIds={activeCard?.memberIds}
            onUpdateCardMembers={onUpdateCardMembers}
          />
        </Box>

        {/* Due Date section */}
        {activeCard?.dueDate && (
          <Box sx={{ mb: 3 }}>
            <Typography sx={{ fontWeight: '600', color: 'primary.main', mb: 1 }}>Due Date</Typography>
            <Box 
              sx={{ 
                display: 'flex', 
                alignItems: 'center', 
                gap: 1,
                p: 1.5,
                borderRadius: 1,
                backgroundColor: (theme) => 
                  theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.05)',
                border: `1px solid ${getDueDateStatusColor(activeCard.dueDate)}`,
                color: getDueDateStatusColor(activeCard.dueDate)
              }}
            >
              <WatchLaterOutlinedIcon fontSize="small" />
              <Typography variant="body2" sx={{ fontWeight: 500 }}>
                {formatDueDateDisplay(activeCard.dueDate)}
              </Typography>
            </Box>
          </Box>
        )}

        {/* Add to card buttons - horizontal layout */}
        <Box sx={{ mb: 3 }}>
          <Typography sx={{ fontWeight: '600', color: 'primary.main', mb: 1 }}>Add To Card</Typography>
          <Stack 
            direction="row" 
            spacing={1} 
            sx={{ 
              flexWrap: 'wrap', 
              gap: 1,
              '& .MuiBox-root': {
                minWidth: '120px',
                maxWidth: '150px',
                flex: '1 1 auto',
                height: '36px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'flex-start',
                transition: 'all 0.2s ease',
                '&:hover': {
                  transform: 'translateY(-1px)',
                  boxShadow: (theme) => theme.palette.mode === 'dark' 
                    ? '0 2px 4px rgba(255, 255, 255, 0.1)' 
                    : '0 2px 4px rgba(0, 0, 0, 0.1)',
                }
              }
            }}
          >
            {/* Feature 05: X·ª≠ l√Ω h√†nh ƒë·ªông b·∫£n th√¢n user t·ª± join v√†o card */}
            {/* N·∫øu user hi·ªán t·∫°i ƒëang ƒëƒÉng nh·∫≠p ch∆∞a thu·ªôc m·∫£ng memberIds c·ªßa card th√¨ m·ªõi cho hi·ªán n√∫t Join v√† ng∆∞·ª£c l·∫°i */}
            {activeCard?.memberIds?.includes(currentUser._id)
              ? <SidebarItem
                sx={{ color: 'error.light', '&:hover': { color: 'error.light' } }}
                onClick={() => onUpdateCardMembers({
                  userId: currentUser._id,
                  action: CARD_MEMBER_ACTIONS.REMOVE
                })}
              >
                <ExitToAppIcon fontSize="small" />
                Leave
              </SidebarItem>
              : <SidebarItem
                className="active"
                onClick={() => onUpdateCardMembers({
                  userId: currentUser._id,
                  action: CARD_MEMBER_ACTIONS.ADD
                })}
              >
                <Box sx={{ width: '100%', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                    <PersonOutlineOutlinedIcon fontSize="small" />
                    <span>Join</span>
                  </Box>
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <CheckCircleIcon fontSize="small" sx={{ color: '#27ae60' }} />
                  </Box>
                </Box>
              </SidebarItem>
            }

            {/* Feature 06: X·ª≠ l√Ω h√†nh ƒë·ªông c·∫≠p nh·∫≠t ·∫£nh Cover c·ªßa Card */}
            <SidebarItem className="active" onClick={onShowCoverOptions}>
              <Box sx={{ width: '100%', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                  <ImageOutlinedIcon fontSize="small" />
                  <span>Cover</span>
                </Box>
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <CheckCircleIcon fontSize="small" sx={{ color: '#27ae60' }} />
                </Box>
              </Box>
            </SidebarItem>

            <SidebarItem onClick={onShowAttachmentModal}>
              <AttachFileOutlinedIcon fontSize="small" />Attachment
            </SidebarItem>
            <SidebarItem onClick={onShowLabelDialog}>
              <LocalOfferOutlinedIcon fontSize="small" />Labels
            </SidebarItem>
            <SidebarItem onClick={onShowChecklistDialog}>
              <TaskAltOutlinedIcon fontSize="small" />Checklist
            </SidebarItem>

            {/* "Th√™m" Button */}
            <SidebarItem
              id="more-actions-button"
              aria-controls={openMoreMenu ? 'more-actions-menu' : undefined}
              aria-haspopup="true"
              aria-expanded={openMoreMenu ? 'true' : undefined}
              onClick={handleMoreMenuClick}
            >
              Th√™m
            </SidebarItem>
            <Menu
              id="more-actions-menu"
              anchorEl={anchorEl}
              open={openMoreMenu}
              onClose={handleMoreMenuClose}
              MenuListProps={{
                'aria-labelledby': 'more-actions-button'
              }}
              sx={{
                '& .MuiPaper-root': {
                  borderRadius: '8px',
                  boxShadow: (theme) => theme.palette.mode === 'dark' 
                    ? '0 0 8px rgba(255, 255, 255, 0.1)' 
                    : '0 0 8px rgba(0, 0, 0, 0.1)',
                  backgroundColor: (theme) => theme.palette.mode === 'dark' ? '#2f3542' : '#fff',
                },
                '& .MuiList-root': {
                  padding: '8px',
                },
                '& .MuiMenuItem-root': {
                  borderRadius: '4px',
                  padding: '8px 12px',
                  gap: '8px',
                  transition: 'all 0.2s ease',
                  '&:hover': {
                    backgroundColor: (theme) => theme.palette.mode === 'dark' ? '#33485D' : theme.palette.grey[100],
                  },
                },
              }}
              transformOrigin={{ horizontal: 'right', vertical: 'top' }}
              anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
              TransitionProps={{ timeout: 200 }}
            >
              <MenuItem 
                onClick={() => { 
                  onShowDueDatePicker();
                }}
                sx={{
                  color: (theme) => theme.palette.mode === 'dark' ? '#90caf9' : '#172b4d',
                  fontSize: '14px',
                  fontWeight: '600',
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', gap: '6px', width: '100%' }}>
                  <WatchLaterOutlinedIcon fontSize="small" />
                  <span>Dates</span>
                </Box>
              </MenuItem>
              <MenuItem 
                onClick={() => { 
                  toast.info('T√≠nh nƒÉng Custom Fields ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn');
                  handleMoreMenuClose(); 
                }}
                sx={{
                  color: (theme) => theme.palette.mode === 'dark' ? '#90caf9' : '#172b4d',
                  fontSize: '14px',
                  fontWeight: '600',
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', gap: '6px', width: '100%' }}>
                  <AutoFixHighOutlinedIcon fontSize="small" />
                  <span>Custom Fields</span>
                </Box>
              </MenuItem>
            </Menu>
          </Stack>
        </Box>

        {/* Description and Comments - side by side layout */}
        <Grid container spacing={2} sx={{ mb: 3 }}>
          {/* Description - Left side */}
          <Grid xs={12} sm={6}>
            <Box sx={{ mb: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5, mb: 2 }}>
                <SubjectRoundedIcon />
                <Typography variant="span" sx={{ fontWeight: '600', fontSize: '20px' }}>Description</Typography>
              </Box>

              {/* Feature 03: X·ª≠ l√Ω m√¥ t·∫£ c·ªßa Card v·ªõi scroll */}
              <Box sx={{ 
                maxHeight: '400px', 
                overflowY: 'auto',
                pr: 1,
                '&::-webkit-scrollbar': {
                  width: '8px',
                },
                '&::-webkit-scrollbar-track': {
                  backgroundColor: (theme) => theme.palette.mode === 'dark' ? '#2f3542' : '#f1f1f1',
                  borderRadius: '4px',
                },
                '&::-webkit-scrollbar-thumb': {
                  backgroundColor: (theme) => theme.palette.mode === 'dark' ? '#90caf9' : '#c1c1c1',
                  borderRadius: '4px',
                  '&:hover': {
                    backgroundColor: (theme) => theme.palette.mode === 'dark' ? '#64b5f6' : '#a8a8a8',
                  },
                },
              }}>
                <CardDescriptionMdEditor
                  cardDescriptionProp={activeCard?.description}
                  handleUpdateCardDescription={onUpdateCardDescription}
                />
              </Box>
            </Box>
          </Grid>

          {/* Comments - Right side */}
          <Grid xs={12} sm={6}>
            <Box sx={{ mb: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>
                <DvrOutlinedIcon />
                <Typography variant="span" sx={{ fontWeight: '600', fontSize: '20px' }}>Activity</Typography>
              </Box>

              {/* Feature 04: X·ª≠ l√Ω c√°c h√†nh ƒë·ªông, v√≠ d·ª• comment v√†o Card v·ªõi scroll */}
              <Box sx={{ 
                maxHeight: '400px', 
                overflowY: 'auto',
                pr: 1,
                '&::-webkit-scrollbar': {
                  width: '8px',
                },
                '&::-webkit-scrollbar-track': {
                  backgroundColor: (theme) => theme.palette.mode === 'dark' ? '#2f3542' : '#f1f1f1',
                  borderRadius: '4px',
                },
                '&::-webkit-scrollbar-thumb': {
                  backgroundColor: (theme) => theme.palette.mode === 'dark' ? '#90caf9' : '#c1c1c1',
                  borderRadius: '4px',
                  '&:hover': {
                    backgroundColor: (theme) => theme.palette.mode === 'dark' ? '#64b5f6' : '#a8a8a8',
                  },
                },
              }}>
                <CardActivitySection
                  cardComments={activeCard?.comments}
                  onAddCardComment={onAddCardComment}
                />
              </Box>
            </Box>
          </Grid>
        </Grid>

        {activeCard?.cover && activeCard?.coverType === 'image' && 
          <ImageLightbox 
            isOpen={showCoverLightbox} 
            onClose={handleCloseCoverLightbox} 
            imageSrc={activeCard?.cover} 
          />
        }
        
        <CoverOptionsModal 
          isOpen={showCoverOptions} 
          onClose={onCloseCoverOptions} 
          onSelectColor={onSelectCoverColor}
          onUploadCover={onUploadCoverFromModal}
        />

        <AttachmentModal 
          isOpen={showAttachmentModal}
          onClose={onCloseAttachmentModal}
          cardId={activeCard?._id} // üö® CRITICAL: Pass cardId for API calls
          attachments={attachments}
          onAddAttachment={onAddAttachment}
          onDeleteAttachment={onDeleteAttachment}
          onPreviewAttachment={onShowAttachmentLightbox}
        />

        {selectedAttachment && showAttachmentLightbox && (
          <ImageLightbox 
            isOpen={showAttachmentLightbox}
            onClose={onCloseAttachmentLightbox}
            imageSrc={selectedAttachment.url}
          />
        )}

        {/* Label Dialog */}
        <LabelDialog
          isOpen={showLabelDialog}
          onClose={onCloseLabelDialog}
          predefinedLabels={activeBoard?.labels || []}
          cardLabelIds={activeCard?.labelIds || []}
          onToggleLabel={onToggleLabel}
          onCreateLabel={onCreateLabel}
          onDeleteLabel={onDeleteLabel}
        />

        {/* Checklist Dialog */}
        <ChecklistDialog
          isOpen={showChecklistDialog}
          onClose={onCloseChecklistDialog}
          checklists={checklists}
          onUpdateChecklists={onUpdateChecklists}
          cardId={activeCard?._id}
        />

        {/* Due Date Picker Dialog */}
        <Dialog 
          open={showDueDatePicker} 
          onClose={onCloseDueDatePicker}
          maxWidth="sm"
          fullWidth
          PaperProps={{
            sx: {
              borderRadius: 2,
              backgroundColor: (theme) => theme.palette.mode === 'dark' ? '#2f3542' : '#fff'
            }
          }}
        >
          <DialogTitle sx={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: 1,
            pb: 1
          }}>
            <WatchLaterOutlinedIcon />
            <Typography variant="h6">C√†i ƒë·∫∑t ng√†y h·∫øt h·∫°n</Typography>
          </DialogTitle>
          
          <DialogContent sx={{ pt: 2 }}>
            <TextField
              label="Ch·ªçn ng√†y v√† gi·ªù"
              type="datetime-local"
              value={selectedDateTime}
              onChange={(e) => setSelectedDateTime(e.target.value)}
              fullWidth
              InputLabelProps={{
                shrink: true,
              }}
              sx={{
                '& .MuiInputLabel-root': {
                  color: (theme) => theme.palette.mode === 'dark' ? '#90caf9' : 'inherit'
                },
                '& .MuiOutlinedInput-root': {
                  '& fieldset': {
                    borderColor: (theme) => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.23)' : 'rgba(0, 0, 0, 0.23)'
                  },
                  '&:hover fieldset': {
                    borderColor: (theme) => theme.palette.mode === 'dark' ? '#90caf9' : '#1976d2'
                  }
                }
              }}
            />
            
            {activeCard?.dueDate && (
              <Typography 
                variant="body2" 
                sx={{ 
                  mt: 2, 
                  color: (theme) => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.7)' : 'rgba(0, 0, 0, 0.6)',
                  fontStyle: 'italic'
                }}
              >
                Hi·ªán t·∫°i: {formatDueDateDisplay(activeCard.dueDate)}
              </Typography>
            )}
          </DialogContent>
          
          <DialogActions sx={{ p: 2, gap: 1 }}>
            {activeCard?.dueDate && (
              <Button 
                onClick={onRemoveDueDate}
                color="error"
                variant="outlined"
                size="small"
              >
                X√≥a ng√†y h·∫øt h·∫°n
              </Button>
            )}
            
            <Box sx={{ flex: 1 }} />
            
            <Button 
              onClick={onCloseDueDatePicker}
              variant="outlined"
              size="small"
            >
              H·ªßy
            </Button>
            
            <Button 
              onClick={onSaveDueDate}
              variant="contained"
              size="small"
            >
              L∆∞u
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </Modal>
  )
}

export default ActiveCard
