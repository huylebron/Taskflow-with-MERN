/**
 * Attachment Service for Taskflow project
 * Handles all attachment business logic with error handling and data consistency
 */

import { attachmentModel } from '~/models/attachmentModel'
import { cardModel } from '~/models/cardModel'
import { CloudinaryProvider } from '~/providers/CloudinaryProvider'
import ApiError from '~/utils/ApiError'
import { StatusCodes } from 'http-status-codes'

/**
 * üö® CRITICAL: Upload multiple attachments cho m·ªôt card
 * @param {string} cardId - Card ID
 * @param {Array} files - Array of multer files
 * @returns {Promise<Object>} - Upload result with success and failed files
 */
const uploadAttachments = async (cardId, files) => {
  try {
    // Ki·ªÉm tra card c√≥ t·ªìn t·∫°i kh√¥ng
    const existingCard = await cardModel.findOneById(cardId)
    if (!existingCard) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'Card not found.')
    }

    const uploadResults = {
      success: [],
      failed: [],
      totalFiles: files.length
    }

    // üö® CRITICAL: Process t·ª´ng file v√† handle errors ri√™ng bi·ªát
    for (const file of files) {
      try {
        // üö® CRITICAL: Upload file l√™n Cloudinary v·ªõi card-specific folder
        const attachmentFolder = CloudinaryProvider.createAttachmentFolder(cardId)
        const cloudinaryResult = await CloudinaryProvider.streamUpload(file.buffer, attachmentFolder)
        
        // T·∫°o attachment record trong database
        const attachmentData = {
          cardId: cardId,
          name: file.originalname,
          url: cloudinaryResult.secure_url,
          type: file.mimetype,
          size: file.size,
          cloudinaryPublicId: cloudinaryResult.public_id // üî• QUAN TR·ªåNG: L∆∞u ƒë·ªÉ x√≥a ƒë∆∞·ª£c sau n√†y
        }

        const createdAttachment = await attachmentModel.createNew(attachmentData)
        const newAttachment = await attachmentModel.findOneById(createdAttachment.insertedId)

        if (newAttachment) {
          // ‚ö†Ô∏è C·∫®N TH·∫¨N: C·∫≠p nh·∫≠t card ƒë·ªÉ th√™m attachmentId
          await cardModel.pushAttachmentId(cardId, newAttachment._id.toString())
          
          uploadResults.success.push({
            attachmentId: newAttachment._id,
            name: file.originalname,
            url: cloudinaryResult.secure_url,
            type: file.mimetype,
            size: file.size,
            uploadedAt: newAttachment.createdAt
          })
        }

      } catch (error) {
        console.error(`Failed to upload file ${file.originalname}:`, error)
        
        // üö® CRITICAL: N·∫øu ƒë√£ upload l√™n Cloudinary nh∆∞ng l∆∞u DB failed, c·∫ßn x√≥a file tr√™n Cloudinary
        // (Rollback mechanism)
        
        uploadResults.failed.push({
          name: file.originalname,
          error: error.message || 'Upload failed'
        })
      }
    }

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ chi ti·∫øt
    const result = {
      ...uploadResults,
      message: `Successfully uploaded ${uploadResults.success.length}/${uploadResults.totalFiles} files.`
    }

    // N·∫øu kh√¥ng c√≥ file n√†o upload th√†nh c√¥ng
    if (uploadResults.success.length === 0) {
      throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'Failed to upload any files.')
    }

    return result

  } catch (error) {
    console.error('Upload attachments error:', error)
    throw error
  }
}

/**
 * L·∫•y danh s√°ch attachments c·ªßa m·ªôt card
 * @param {string} cardId - Card ID
 * @returns {Promise<Array>} - List of attachments
 */
const getAttachmentsByCardId = async (cardId) => {
  try {
    // Ki·ªÉm tra card c√≥ t·ªìn t·∫°i kh√¥ng
    const existingCard = await cardModel.findOneById(cardId)
    if (!existingCard) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'Card not found.')
    }

    const attachments = await attachmentModel.findByCardId(cardId)
    return attachments

  } catch (error) {
    console.error('Get attachments error:', error)
    throw error
  }
}

/**
 * üö® CRITICAL: X√≥a m·ªôt attachment (DB + Cloudinary)
 * @param {string} attachmentId - Attachment ID
 * @returns {Promise<Object>} - Delete result
 */
const deleteAttachment = async (attachmentId) => {
  try {
    // L·∫•y th√¥ng tin attachment tr∆∞·ªõc khi x√≥a
    const existingAttachment = await attachmentModel.findOneById(attachmentId)
    if (!existingAttachment) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'Attachment not found.')
    }

    const cardId = existingAttachment.cardId.toString()
    const cloudinaryPublicId = existingAttachment.cloudinaryPublicId

    // ‚ö†Ô∏è C·∫®N TH·∫¨N: Transaction-like approach
    // B∆∞·ªõc 1: Soft delete attachment trong DB
    const deletedAttachment = await attachmentModel.deleteOne(attachmentId)
    
    if (!deletedAttachment) {
      throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'Failed to delete attachment from database.')
    }

    try {
      // B∆∞·ªõc 2: X√≥a attachment kh·ªèi card
      await cardModel.pullAttachmentId(cardId, attachmentId)

      // B∆∞·ªõc 3: X√≥a file tr√™n Cloudinary
      if (cloudinaryPublicId) {
        await CloudinaryProvider.deleteResource(cloudinaryPublicId)
      }

      // B∆∞·ªõc 4: Hard delete kh·ªèi database (optional - c√≥ th·ªÉ gi·ªØ soft delete)
      // await attachmentModel.permanentlyDeleteOne(attachmentId)

    } catch (cleanupError) {
      console.error('Cleanup error after attachment deletion:', cleanupError)
      // Attachment ƒë√£ ƒë∆∞·ª£c soft delete trong DB nh∆∞ng cleanup failed
      // C√≥ th·ªÉ schedule l·∫°i cleanup sau ho·∫∑c log ƒë·ªÉ manual cleanup
    }

    return {
      message: 'Attachment deleted successfully.',
      deletedAttachment: {
        id: attachmentId,
        name: existingAttachment.name,
        cardId: cardId
      }
    }

  } catch (error) {
    console.error('Delete attachment error:', error)
    throw error
  }
}

/**
 * Download attachment (redirect to Cloudinary URL)
 * @param {string} attachmentId - Attachment ID
 * @returns {Promise<Object>} - Download info
 */
const downloadAttachment = async (attachmentId) => {
  try {
    const attachment = await attachmentModel.findOneById(attachmentId)
    if (!attachment) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'Attachment not found.')
    }

    // Tr·∫£ v·ªÅ URL ƒë·ªÉ redirect ho·∫∑c stream
    return {
      name: attachment.name,
      url: attachment.url,
      type: attachment.type,
      size: attachment.size
    }

  } catch (error) {
    console.error('Download attachment error:', error)
    throw error
  }
}

/**
 * C·∫≠p nh·∫≠t attachment metadata
 * @param {string} attachmentId - Attachment ID
 * @param {Object} updateData - Data to update
 * @returns {Promise<Object>} - Updated attachment
 */
const updateAttachment = async (attachmentId, updateData) => {
  try {
    const existingAttachment = await attachmentModel.findOneById(attachmentId)
    if (!existingAttachment) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'Attachment not found.')
    }

    const updatedAttachment = await attachmentModel.update(attachmentId, updateData)
    return updatedAttachment

  } catch (error) {
    console.error('Update attachment error:', error)
    throw error
  }
}

/**
 * üî• QUAN TR·ªåNG: Cleanup orphaned attachments
 * H√†m n√†y ƒë·ªÉ cleanup nh·ªØng attachment b·ªã orphaned ho·∫∑c failed uploads
 * @returns {Promise<Object>} - Cleanup result
 */
const cleanupOrphanedAttachments = async () => {
  try {
    // L·∫•y t·∫•t c·∫£ attachments ƒë√£ b·ªã soft delete
    const destroyedAttachments = await attachmentModel.findAllDestroyed()
    
    let cleanedCount = 0
    const errors = []

    for (const attachment of destroyedAttachments) {
      try {
        // X√≥a file tr√™n Cloudinary n·∫øu c√≥ public_id
        if (attachment.cloudinaryPublicId) {
          await CloudinaryProvider.deleteResource(attachment.cloudinaryPublicId)
        }
        
        // Hard delete kh·ªèi database
        await attachmentModel.permanentlyDeleteOne(attachment._id.toString())
        
        cleanedCount++
      } catch (error) {
        errors.push({
          attachmentId: attachment._id,
          error: error.message
        })
      }
    }

    return {
      cleanedCount,
      totalProcessed: destroyedAttachments.length,
      errors
    }

  } catch (error) {
    console.error('Cleanup orphaned attachments error:', error)
    throw error
  }
}

export const attachmentService = {
  uploadAttachments,
  getAttachmentsByCardId,
  deleteAttachment,
  downloadAttachment,
  updateAttachment,
  cleanupOrphanedAttachments
} 